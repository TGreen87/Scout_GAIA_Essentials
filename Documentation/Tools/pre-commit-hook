#!/bin/bash

# Git pre-commit hook to check for proper version control information
# To install, copy this file to .git/hooks/pre-commit and make it executable:
# cp pre-commit-hook .git/hooks/pre-commit
# chmod +x .git/hooks/pre-commit

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Running version control checks...${NC}"

# Get list of changed markdown, python, and javascript files
changed_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(md|py|js|jsx|ts|tsx|html|css|scss)$')

if [ -z "$changed_files" ]; then
    echo -e "${GREEN}No relevant files to check.${NC}"
    exit 0
fi

# Initialize counters
issues_found=0
files_checked=0

# Check each file
for file in $changed_files; do
    files_checked=$((files_checked + 1))
    file_issues=0
    
    # Skip specific files and directories
    if [[ $file == *"node_modules/"* ]] || 
       [[ $file == *"venv/"* ]] || 
       [[ $file == *"README.md"* ]] || 
       [[ $file == *"package.json"* ]]; then
        continue
    fi
    
    echo -n "Checking $file... "
    
    # Check for version information
    if ! grep -q -E "[Vv]ersion:? +([0-9]+\.[0-9]+\.[0-9]+)" "$file"; then
        echo -e "\n  ${RED}✗ Missing version information${NC}"
        file_issues=$((file_issues + 1))
    fi
    
    # Check for last updated date
    if ! grep -q -E "[Ll]ast [Uu]pdated:? +([0-9]{4}-[0-9]{2}-[0-9]{2})" "$file"; then
        echo -e "\n  ${RED}✗ Missing last updated date${NC}"
        file_issues=$((file_issues + 1))
    fi
    
    # For larger files, check for changelog (only for markdown files)
    if [[ $file == *.md ]]; then
        file_size=$(wc -l < "$file")
        if [[ $file_size -gt 30 ]]; then
            if ! grep -q -E "[Cc]hange ?[Ll]og" "$file"; then
                echo -e "\n  ${RED}✗ Missing changelog section${NC}"
                file_issues=$((file_issues + 1))
            fi
        fi
    fi
    
    # If file has issues, increment the counter
    if [ $file_issues -gt 0 ]; then
        issues_found=$((issues_found + 1))
    else
        echo -e "${GREEN}✓ OK${NC}"
    fi
done

echo "----------------------------------------"
echo -e "${YELLOW}Version Control Check Summary:${NC}"
echo "Files checked: $files_checked"
echo "Files with issues: $issues_found"

# If issues were found, provide guidance
if [ $issues_found -gt 0 ]; then
    echo -e "\n${YELLOW}Please fix the version control issues before committing:${NC}"
    echo "1. Add version information to files:"
    echo "   Version: 1.0.0"
    echo "2. Add last updated date:"
    echo "   Last Updated: $(date +%Y-%m-%d)"
    echo "3. Add changelog section to markdown files:"
    echo "   ## Change Log"
    echo "   | Version | Date | Author | Changes |"
    echo "   |---------|------|--------|---------|"
    echo "   | 1.0.0 | $(date +%Y-%m-%d) | Your Name | Initial version |"
    echo -e "\nYou can use the version_update.py utility to add these elements automatically:"
    echo "python3 Green_AI_Solutions/Documentation/Tools/version_update.py update path/to/file 1.0.0 \"Initial version\""
    echo -e "\n${YELLOW}Use git commit --no-verify to bypass this check (not recommended).${NC}"
    
    # Ask if the user wants to proceed anyway
    read -p "Do you want to proceed with the commit anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}Commit aborted.${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}Proceeding with commit despite version control issues.${NC}"
fi

exit 0